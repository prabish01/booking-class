// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  username        String   @unique
  password        String
  firstName       String
  lastName        String
  phone           String?
  address         String
  dateOfBirth     DateTime
  gender          Gender
  heardAboutUs    HeardAboutUs
  confirmed       Boolean  @default(false)
  blocked         Boolean  @default(false)
  role            Role     @default(USER)
  profilePicture  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  bookings        Booking[]

  @@map("users")
}

model Video {
  id          String   @id @default(cuid())
  title       String
  description String?
  videoUrl    String
  thumbnailUrl String?
  category    String?
  duration    Int?     // duration in seconds
  level       Level    @default(BEGINNER)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("videos")
}

model ClassOccurrence {
  id          String   @id @default(cuid())
  title       String
  description String?
  date        DateTime
  startTime   String   // e.g., "18:00"
  endTime     String   // e.g., "19:30"
  maxCapacity Int      @default(20)
  price       Float
  level       Level    @default(BEGINNER)
  instructor  String
  location    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bookings    Booking[]

  @@map("class_occurrences")
}

model Booking {
  id              String   @id @default(cuid())
  bookingDate     DateTime @default(now())
  status          BookingStatus @default(CONFIRMED)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentAmount   Float
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userId          String
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade)
  classOccurrenceId String
  classOccurrence ClassOccurrence @relation(fields: [classOccurrenceId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model SiteSetting {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("site_settings")
}

// Enums
enum Gender {
  MALE
  FEMALE
  NON_BINARY
  PREFER_NOT_TO_SAY

  @@map("gender")
}

enum HeardAboutUs {
  SOCIAL_MEDIA
  FRIEND_REFERRAL
  GOOGLE_SEARCH
  FLYER_POSTER
  LOCAL_NEWSPAPER
  COMMUNITY_EVENT
  OTHER

  @@map("heard_about_us")
}

enum Role {
  USER
  ADMIN

  @@map("role")
}

enum Level {
  BEGINNER
  INTERMEDIATE
  ADVANCED

  @@map("level")
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW

  @@map("booking_status")
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED

  @@map("payment_status")
}